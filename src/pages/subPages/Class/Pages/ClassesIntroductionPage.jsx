import React from 'react';

const ClassesIntroductionPage = () => {
    return (
        <div className="page-container">
            <h1>Вступ до класів</h1>
            <p>
                JavaScript володіє потужним засобом для роботи з об'єктами і створення класів, що надає програмістам можливість створювати більш структуровані та організовані програми. У цьому розділі ми розглянемо основи класів в JavaScript, здійснимо повторення базових понять та розглянемо переваги використання класів у програмуванні.
            </p>

            <h2>1. Повторення прототипів та основи класів в JavaScript</h2>
            <p>
                JavaScript використовує прототипне наслідування, завдяки чому кожен об'єкт може успадковувати властивості і методи іншого об'єкта. Прототипи — сильна частина мови, проте не завжди зрозуміла. У базовому варіанті, це так:
            </p>
            <pre>
        <code>
          {`
// Функція конструктора для створення об'єкта Person
function Person(name, age) {
  this.name = name;
  this.age = age;
}

// Додавання методу greet до прототипу об'єкта Person
Person.prototype.greet = function() {
  console.log(\`Привіт, мене звати \${this.name} і мені \${this.age} років.\`);
};

// Створення об'єкта за допомогою функції конструктора
const person1 = new Person("Іван", 25);
person1.greet(); // "Привіт, мене звати Іван і мені 25 років."
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі функція <code>Person</code> виступає як конструктор, який створює новий об'єкт з властивостями <code>name</code> та <code>age</code>. Метод <code>greet</code> додається до прототипу об'єкта, щоб всі об'єкти, створені за допомогою конструктора <code>Person</code>, могли використовувати цей метод.
            </p>
            <p>
                Однак у сучасному JavaScript існують класи, які надають більш зручний та зрозумілий спосіб створення об'єктів. Наприклад, визначимо клас <code>Person</code>, який буде мати властивості "ім'я" та "вік" і метод "привітатися":
            </p>
            <pre>
        <code>
          {`
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(\`Привіт, мене звати \${this.name} і мені \${this.age} років.\`);
  }
}

// Створення об'єкта за допомогою класу
const person1 = new Person("Іван", 25);
person1.greet(); // "Привіт, мене звати Іван і мені 25 років."
          `}
        </code>
      </pre>

            <h2>2. Переваги використання класів у програмуванні</h2>
            <p>
                Використання класів у програмуванні має ряд переваг:
            </p>
            <ul>
                <li>
                    <strong>Організація коду:</strong> Використання класів сприяє більшій організації коду, дозволяючи групувати властивості та методи, що відносяться до одного об'єкта, в один модуль.
                </li>
                <li>
                    <strong>Полегшення створення об'єктів:</strong> Класи надають зручний спосіб створювати нові об'єкти. Конструктор класу визначає, які властивості має об'єкт, та встановлює їх по замовчуванню при створенні нового екземпляру.
                </li>
                <li>
                    <strong>Спадкування та розширенство:</strong> Класи підтримують спадкування, що дозволяє створювати нові класи на основі існуючих. Це зменшує дублювання коду і дозволяє використовувати властивості та методи батьківського класу.
                </li>
                <li>
                    <strong>Зрозумілість:</strong> Використання класів робить код більш зрозумілим для розробників, оскільки вони можуть легко визначити структуру об'єктів та їхні можливості.
                </li>
                <li>
                    <strong>Модульність:</strong> Класи сприяють модульності, що дозволяє структурувати програму за концепцією об'єктно-орієнтованого програмування (ООП).
                </li>
            </ul>

            <div className='conclusion'>
                <h2>Заключення</h2>
                <p>
                    Класи в JavaScript надають потужний інструмент для створення структурованих та організованих
                    програм. Вони дозволяють легко створювати об'єкти, групувати властивості та методи, а також
                    реалізовувати спадкування. Використання класів робить код більш зрозумілим, модульним та
                    підтримуваним, що є ключовим аспектом сучасного програмування.
                </p>
            </div>
        </div>
    );
};

export default ClassesIntroductionPage;