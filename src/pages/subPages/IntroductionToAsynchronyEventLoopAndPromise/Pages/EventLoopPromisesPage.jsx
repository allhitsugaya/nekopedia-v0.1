import React from 'react';

const EventLoopPromisesPage = () => {
    return (
        <div className="page-container">
            <h1>Вступ</h1>
            <p>
                У цій темі ми розглядаємо, як працює <strong>Event Loop</strong> — механізм, який дозволяє обробляти асинхронний код. Ми вивчаємо роль веб-подій, таймерів, та функцій зворотного виклику у створенні неочікуваних сценаріїв та забезпеченні гладкої роботи програм.
            </p>
            <p>
                Вивчаємо <strong>Promise</strong>, який є об'єктом, що представляє результат асинхронної операції. Використовуючи <code>Promise</code>, можна краще обробляти асинхронний код та здійснювати послідовні або паралельні операції.
            </p>
            <p>
                А за допомогою прикладів, ми глибше зрозуміємо, як JavaScript управляє виконанням коду та як забезпечує відзивчивість додатків.
            </p>
        </div>
    );
};

export default EventLoopPromisesPage;