import React from 'react';

const HigherOrderFunctionsPage = () => {
    return (
        <div className="page-container">
            <h1>Функція вищого порядку</h1>
            <p>
                Функції вищого порядку - це потужний інструмент в мові програмування JavaScript, який дозволяє працювати з функціями як зі звичайними даними. Ці функції можуть приймати інші функції як аргументи, повертати функції як результати і використовувати їх для створення більш складних алгоритмів. У цій доповіді ми розглянемо основні концепції функцій вищого порядку та їх використання для обробки масивів у JavaScript.
            </p>

            <h2>Що таке функції вищого порядку?</h2>
            <p>
                Функції вищого порядку (higher-order functions) - це функції, які приймають одну або декілька інших функцій як аргументи і/або повертають функції як результат своєї роботи. Функції вищого порядку є потужним інструментом в функціональному програмуванні і в JavaScript загалом, оскільки вони дозволяють створювати більш абстрактний та зрозумілий код.
            </p>
            <p>
                Основні характеристики функцій вищого порядку:
            </p>
            <ul>
                <li>
                    <strong>Прийом функцій як аргументів:</strong> Функція вищого порядку може приймати інші функції як параметри. Це дозволяє передавати логіку обробки даних в якості аргументу.
                </li>
                <li>
                    <strong>Повернення функцій:</strong> Функція вищого порядку може повертати іншу функцію як результат своєї роботи. Це дозволяє створювати інші функції "на льоту" залежно від умов або потреби.
                </li>
                <li>
                    <strong>Маніпуляція функціями:</strong> Функції вищого порядку можуть виконувати різні операції з функціями, такі як композиція, каррінг, фільтрація, мапування тощо.
                </li>
                <li>
                    <strong>Абстракція:</strong> Вони дозволяють абстрагуватися від конкретних операцій та дій, що роблять функції більш універсальними та повторно використовуваними.
                </li>
                <li>
                    <strong>Підвищення зрозумілості коду:</strong> Використання функцій вищого порядку може покращити зрозумілість та читабельність коду, оскільки вони дозволяють виразити логіку більш декларативним способом.
                </li>
            </ul>

            <h2>Використання функцій вищого порядку для обробки масивів</h2>
            <p>
                Одним із найпоширеніших використань функцій вищого порядку у JavaScript є їх застосування до обробки масивів. Декілька основних методів масивів, які використовують функції вищого порядку:
            </p>

            <h3>1. map()</h3>
            <p>
                Цей метод створює новий масив, застосовуючи задану функцію до кожного елемента початкового масиву. Наприклад, для подвоєння значень масиву можна використовувати такий код:
            </p>
            <pre>
        <code>
          {`
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(function (number) {
  return number * 2;
});
// doubled стає [2, 4, 6, 8, 10]
          `}
        </code>
      </pre>

            <h3>2. filter()</h3>
            <p>
                Цей метод створює новий масив, включаючи тільки ті елементи, для яких задана функція повертає <code>true</code>. Наприклад, для відфільтровування парних чисел з масиву:
            </p>
            <pre>
        <code>
          {`
const numbers = [1, 2, 3, 4, 5];
const evens = numbers.filter(function (number) {
  return number % 2 === 0;
});
// evens стає [2, 4]
          `}
        </code>
      </pre>

            <h3>3. reduce()</h3>
            <p>
                Цей метод застосовує задану функцію до всіх елементів масиву та акумулює результати в одне значення. Наприклад, для обчислення суми елементів масиву:
            </p>
            <pre>
        <code>
          {`
const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce(function (accumulator, currentValue) {
  return accumulator + currentValue;
}, 0);
// sum буде рівним 15
          `}
        </code>
      </pre>

            <h3>4. forEach()</h3>
            <p>
                Цей метод виконує задану функцію для кожного елемента масиву, але не створює нового масиву. Він використовується для виконання певних дій для кожного елемента масиву.
            </p>
            <pre>
        <code>
          {`
const numbers = [1, 2, 3, 4, 5];
numbers.forEach(function (number) {
  console.log(number);
});
// Виведе числа в консоль
          `}
        </code>
      </pre>

            <h2>Заключення</h2>
            <p>
                Функції вищого порядку роблять обробку даних більш зручною, читабельною та ефективною, дозволяючи виконувати операції над масивами без необхідності писати довгий та складний код. Вони є потужним інструментом для роботи з даними в JavaScript і допомагають підвищити продуктивність та якість коду.
            </p>
        </div>
    );
};

export default HigherOrderFunctionsPage;