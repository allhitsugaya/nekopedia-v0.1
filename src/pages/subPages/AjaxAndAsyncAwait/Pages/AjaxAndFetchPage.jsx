import React from 'react';

const AjaxAndFetchPage = () => {
    return (
        <div className="page-container">
            <h1>Ajax та fetch</h1>

            <p>
                <strong>Ajax</strong>, що розшифровується як <strong>Asynchronous JavaScript and XML</strong> (Асинхронний JavaScript і XML), є потужним інструментом у веб-розробці, який дозволяє взаємодіяти з сервером без необхідності оновлення сторінки.
            </p>

            <h2>Що таке Ajax - Asynchronous JavaScript and XML:</h2>
            <p>
                <strong>Ajax</strong> - це техніка асинхронного обміну даними між клієнтом та сервером без необхідності перезавантаження сторінки. Ця технологія дозволяє вам виконувати запити до сервера, отримувати та відправляти дані, а потім динамічно оновлювати частини сторінки.
            </p>

            <h2>Роль Ajax у веб-розробці:</h2>
            <p>
                <strong>Ajax</strong> грає ключову роль у створенні динамічних та інтерактивних веб-застосунків. За допомогою Ajax, ви можете асинхронно завантажувати дані, взаємодіяти з сервером, оновлювати інформацію на сторінці та створювати більш плавні та швидкі веб-додатки.
            </p>

            <h2>Історія розвитку Ajax</h2>
            <h3>Зародження концепції:</h3>
            <p>
                Концепція Ajax була представлена в 1999 році Джессі Джеймсом Гарреттом, який використав термін "Ajax" для опису ряду технологій, які дозволяють браузеру асинхронно обмінюватися даними з сервером. Перші імплементації включали в себе використання <code>XMLHttpRequest</code> об'єкта в JavaScript.
            </p>

            <h3>Застосування в різних етапах веб-розвитку:</h3>
            <ul>
                <li>
                    <strong>Початковий етап (1999-2005):</strong> Ajax знаходив своє застосування в інтерактивних елементах веб-сайтів, але техніка була відносно складною та неодноразово вимагала великої кількості коду.
                </li>
                <li>
                    <strong>Розвиток і бібліотеки (2005-2010):</strong> З'явлення бібліотек, таких як jQuery та Prototype, значно спростило використання Ajax, роблячи його більш доступним розробникам.
                </li>
                <li>
                    <strong>Подальший розвиток (після 2010):</strong> З'явлення сучасних фреймворків, таких як React, Angular та Vue.js, робить використання Ajax швидшим, зручнішим та більш інтегрованим у загальний процес веб-розробки.
                </li>
            </ul>

            <h2>1. Використання об'єкта XMLHttpRequest для взаємодії з сервером</h2>
            <p>
                Об'єкт <code>XMLHttpRequest</code> дозволяє асинхронно взаємодіяти з сервером. Основні етапи використання <code>XMLHttpRequest</code> включають створення об'єкта, визначення типу запиту (GET, POST і т.д.), вказання адреси сервера та обробку відповіді.
            </p>
            <p>
                Приведемо приклад використання <code>XMLHttpRequest</code> для відправки GET-запиту:
            </p>
            <pre>
                <code>
{`// Створення об'єкта XMLHttpRequest
const xhr = new XMLHttpRequest();

// Налаштування параметрів запиту
xhr.open('GET', 'https://api.example.com/data', true);

// Визначення функції зворотного виклику для обробки відповіді
xhr.onreadystatechange = function () {
    if (xhr.readyState === 4 && xhr.status === 200) {
        console.log(xhr.responseText);
    }
};

// Відправлення запиту
xhr.send();`}
                </code>
            </pre>

            <h2>2. Синтаксис та основні методи XMLHttpRequest</h2>
            <h3>2.1 Створення об'єкта XMLHttpRequest</h3>
            <p>
                Для створення об'єкта <code>XMLHttpRequest</code>, використовується конструктор:
            </p>
            <pre>
                <code>
{`const xhr = new XMLHttpRequest();`}
                </code>
            </pre>

            <h3>2.2 Відкриття запиту</h3>
            <p>
                Метод <code>open()</code> використовується для налаштування параметрів запиту, таких як тип (GET, POST і т.д.) та адреса сервера:
            </p>
            <pre>
                <code>
{`xhr.open('GET', 'https://api.example.com/data', true);`}
                </code>
            </pre>
            <p>
                Останній параметр <code>true</code> вказує, що запит є асинхронним.
            </p>

            <h3>2.3 Визначення функції зворотного виклику</h3>
            <p>
                Метод <code>onreadystatechange</code> встановлює функцію зворотного виклику, яка буде викликана при зміні стану запиту:
            </p>
            <pre>
                <code>
{`xhr.onreadystatechange = function () {
    if (xhr.readyState === 4 && xhr.status === 200) {
        console.log(xhr.responseText);
    }
};`}
                </code>
            </pre>

            <h3>2.4 Відправлення запиту</h3>
            <p>
                Метод <code>send()</code> використовується для відправлення запиту на сервер:
            </p>
            <pre>
                <code>
{`xhr.send();`}
                </code>
            </pre>
            <p>
                Це починає процес відправки запиту до сервера. Коли відповідь готова, викликається функція зворотного виклику.
            </p>

            <h3>2.5 Обробка відповіді</h3>
            <p>
                Функція зворотного виклику перевіряє стан та статус запиту. Якщо стан - 4 (завершено), а статус - 200 (OK), то виводиться вміст відповіді:
            </p>
            <pre>
                <code>
{`if (xhr.readyState === 4 && xhr.status === 200) {
    console.log(xhr.responseText);
}`}
                </code>
            </pre>

            <h2>3. Що таке fetch та як з ним працювати</h2>
            <p>
                <strong>Fetch API</strong> - це інтерфейс, який надає вам можливість контролювати різні параметри запиту, такі як метод, заголовки, тіло, режим, перенаправлення тощо. Він надає зручний і простий спосіб взаємодії з сервером та отримання або відправлення даних. Основні особливості <code>fetch</code> включають проміс-підтримку та вбудовані методи для обробки HTTP-відповідей. Приклад відправки запиту:
            </p>
            <pre>
                <code>
{`fetch('https://api.example.com/data')
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error('Помилка:', error));`}
                </code>
            </pre>
            <p>
                З <code>fetch</code> можна працювати із звичайними HTTP-запитами, а також використовувати його в контексті сучасних фреймворків та бібліотек для взаємодії з сервером у веб-розробці.
            </p>
        </div>
    );
};

export default AjaxAndFetchPage;