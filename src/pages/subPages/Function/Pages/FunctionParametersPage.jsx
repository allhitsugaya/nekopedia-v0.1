import React from 'react';

const FunctionParametersPage = () => {
    return (
        <div className="page-container">
            <h1>Параметри функцій, значення за замовчуванням</h1>
            <p>
                Функції в JavaScript є важливим засобом для структурування та організації коду. Вони дозволяють визначати блоки коду, які можна використовувати багаторазово, щоб виконувати конкретні завдання. Однією з ключових аспектів роботи з функціями є передача параметрів, визначення значень за промовчанням та розпакування параметрів. У цій доповіді ми розглянемо ці аспекти та наведемо приклади їх використання.
            </p>

            <h2>Передача параметрів в функцію</h2>
            <p>
                Параметри - це значення, які функція отримує при своєму виклику. Вони дозволяють передавати дані функції, які можуть використовуватися всередині функції для виконання певних дій. Параметри визначаються у дужках при створенні функції, і їх може бути багато або жодного.
            </p>
            <pre>
        <code>
          {`
function showMessage(message) {
    console.log(message);
}

showMessage("Привіт, світ!"); // Виведе "Привіт, світ!" в консоль
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі <code>message</code> - це параметр функції <code>showMessage</code>, і ми передаємо йому рядок <code>"Привіт, світ!"</code>. Функція виведе цей рядок у консоль.
            </p>

            <h2>Значення за замовчуванням</h2>
            <p>
                Іноді буває необхідно вказати значення за замовчуванням для параметрів функції, тобто значення, які використовуються, якщо значення для параметра не передано при виклику функції.
            </p>
            <pre>
        <code>
          {`
function sayHi(name = "Гість") {
    console.log(\`Привіт, \${name}!\`);
}

sayHi(); // Виведе "Привіт, Гість!" в консоль
sayHi("Іван"); // Виведе "Привіт, Іван!" в консоль
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі параметр <code>name</code> має значення за промовчанням <code>"Гість"</code>. Якщо при виклику функції не передано значення для <code>name</code>, воно приймає значення <code>"Гість"</code>. Однак, якщо передати значення, наприклад <code>"Іван"</code>, то воно перезапише значення за замовчуванням.
            </p>

            <h2>Розпакування параметрів</h2>
            <p>
                Розпакування параметрів дозволяє функції приймати аргументи у вигляді об'єкта або масиву і розпаковувати їх у окремі параметри. Це дуже корисно при роботі зі складними структурами даних.
            </p>
            <pre>
        <code>
          {`
function createUser({ name, age }) {
    console.log(\`Ім'я: \${name}, Вік: \${age}\`);
}

const user = { name: "Іван", age: 30 };
createUser(user); // Виведе "Ім'я: Іван, Вік: 30"
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі ми передаємо об'єкт <code>user</code> у функцію <code>createUser</code>, і цей об'єкт розпаковується у параметри функції. Ми можемо звертатися до <code>name</code> та <code>age</code> безпосередньо, не використовуючи <code>user.name</code> або <code>user.age</code>.
            </p>

            <div className='conclusion'>
                <h2>Заключення</h2>
                <p>
                    Розуміння того, як працюють параметри, значення за промовчанням та розпакування параметрів, є
                    важливою частиною роботи з функціями в JavaScript. Ці концепції допомагають створювати більш гнучкий
                    та повторно використовуваний код, що є важливим для розробки ефективних програм на JavaScript.
                </p>
            </div>
        </div>
    );
};

export default FunctionParametersPage;