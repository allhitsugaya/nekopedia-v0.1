import React from 'react';

const DataTypesCategoriesPage = () => {
    return (
        <div className="page-container">
            <h1>Основні категорії типів даних та їх призначення</h1>
            <p>
                JavaScript є мовою програмування, яка має динамічну систему типів, що означає, що типи даних визначаються автоматично в процесі виконання програми. Це відрізняє JavaScript від мов зі статичною системою типів, де тип даних має бути визначений явно. У JavaScript існують різні типи даних, і кожен з них відповідає певному роду даних або значенню.
            </p>
            <p>
                Розуміння типів даних має важливе значення для розробників програмного забезпечення. Воно допомагає визначити, як дані будуть використовуватися та оброблятися в програмі, а також визначити їхні обмеження та можливості. Помилки в роботі з типами даних можуть призвести до неправильної роботи програми, її зависання або навіть до вразливостей безпеки.
            </p>

            <h2>Типи даних у JavaScript</h2>
            <p>
                Типи даних у JavaScript поділяються на дві категорії: <strong>примітивні</strong> та <strong>об'єктні</strong>.
            </p>
            <ul>
                <li>
                    <strong>Примітивні типи даних</strong> включають в себе числа (<code>number</code>), рядки (<code>string</code>), булеві значення (<code>boolean</code>), <code>null</code>, <code>undefined</code>, <code>BigInt</code> та <code>Symbol</code>. Вони володіють простою структурою та передаються за значенням, що означає, що при копіюванні одного значення в інше створюється нова копія даних.
                </li>
                <li>
                    <strong>Об'єктні типи даних</strong> включають в себе об'єкти (<code>object</code>), масиви (<code>array</code>), функції (<code>function</code>) та інші. Вони володіють складною структурою та передаються за посиланням, що означає, що при копіюванні створюється посилання на той самий об'єкт.
                </li>
            </ul>

            <h2>Основні категорії типів даних та їх призначення</h2>

            <h3>Числа (number)</h3>
            <p>Використовуються для представлення числових значень, як цілі, так і дробові числа.</p>
            <pre>
        <code>
          {`
const age = 30;
const price = 19.99;
          `}
        </code>
      </pre>

            <h3>BigInt</h3>
            <p>Цей тип даних дозволяє представляти дуже великі цілі числа, які не можуть бути точно виражені типом <code>Number</code>.</p>
            <pre>
        <code>
          {`
const bigNumber = 1234567890123456789012345678901234567890n;
          `}
        </code>
      </pre>

            <h3>Рядки (string)</h3>
            <p>Використовуються для представлення текстової інформації.</p>
            <pre>
        <code>
          {`
const name = "John";
          `}
        </code>
      </pre>

            <h3>Булеві значення (boolean)</h3>
            <p>Мають два можливих стани: <code>true</code> (істина) та <code>false</code> (хибність). Використовуються для умовних виразів.</p>
            <pre>
        <code>
          {`
const isLogged = true;
const hasPermission = false;
          `}
        </code>
      </pre>

            <h3>Null та Undefined</h3>
            <p>
                Використовуються для представлення відсутності значення. <code>null</code> вказує на відсутність значення, тоді як <code>undefined</code> вказує на змінну, яка була оголошена, але не має значення.
            </p>
            <pre>
        <code>
          {`
const emptyValue = null;
console.log(emptyValue); // null

let variable;
console.log(variable); // undefined
          `}
        </code>
      </pre>
            <p>
                ⚠️ <code>null</code> має тип <code>"object"</code> у JavaScript з історичних причин. Коли JavaScript був розроблений на початку 1990-х, помилка була допущена в дизайні мови, і тип даних <code>null</code> був помилково визначений як <code>"object"</code>. Ця помилка залишилася в мові для забезпечення сумісності з існуючими програмами. Тобто тип <code>"object"</code> для <code>null</code> - це особливість мови JavaScript, яку потрібно пам'ятати при роботі з цим значенням.
            </p>

            <h3>Symbol</h3>
            <p>Використовуються для створення унікальних ідентифікаторів.</p>
            <pre>
        <code>
          {`
const uniqueID = Symbol('description');
          `}
        </code>
      </pre>

            <h3>Object (Об'єкт)</h3>
            <p>
                Це структура, яка використовується не тільки для зберігання даних, але й для створення інших структур, де будь-яка структура створюється з використанням ключового слова <code>new</code>: <code>new Object</code>, <code>new Array</code>, <code>new Map</code>, <code>new Set</code>, <code>new WeakMap</code>, <code>new WeakSet</code>, <code>new Date</code> та безліч інших структур.
            </p>
            <pre>
        <code>
          {`
let person = {
  name: 'Alice',
  age: 30,
  sayHello: function() {
    console.log('Hello, ' + this.name);
  }
};
          `}
        </code>
      </pre>
            <p>
                ⚠️ В JavaScript тип даних <code>function</code> відноситься до об'єктів (<code>object</code>). Функції у JavaScript є об'єктами першого класу, що означає, що вони можуть бути передані як аргументи, присвоєні змінним, збережені у властивостях об'єктів і повертати із функцій. Функції також можуть мати властивості, які можна додавати до них.
            </p>
        </div>
    );
};

export default DataTypesCategoriesPage;