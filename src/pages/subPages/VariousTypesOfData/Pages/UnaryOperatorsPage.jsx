import React from 'react';

const UnaryOperatorsPage = () => {
    return (
        <div className="page-container">
            <h1>Унарні оператори та їх роль</h1>
            <p>
                У JavaScript є два типи операторів: унарні та бінарні. Унарні оператори діють на один операнд, тоді як бінарні оператори діють на два операнди. Унарні оператори можуть бути передоператорами або постдекрементами.
            </p>

            <h2>Передоператори</h2>
            <p>
                Передоператор - це унарний оператор, який змінює значення операнду перед тим, як виконається дія. Унарні передоператори включають в себе плюс, мінус, логічне заперечення та інші. Ось декілька прикладів:
            </p>
            <pre>
        <code>
          {`
let x = 10;
x = -x; // Переприсвоюємо x зі зміненим знаком
console.log(x); // -10

let z = true;
let w = !z;
console.log(w); // false
          `}
        </code>
      </pre>

            <h2>Постдекременти</h2>
            <p>
                Постдекремент - це унарний оператор, який зменшує значення операнду після того, як виконано дію. Постдекремент може використовуватися зі змінними, об'єктами та іншими типами даних. Ось декілька прикладів:
            </p>
            <pre>
        <code>
          {`
let x = 10;
x--;
console.log(x); // 9

let obj = { a: 1, b: 2 };
let z = obj.a--; // z = 1, obj.a = 0
          `}
        </code>
      </pre>

            <h2>Роль унарних операторів</h2>
            <p>
                Унарні оператори є важливими елементами JavaScript, оскільки вони допомагають здійснювати швидкі та ефективні операції з даними. Вони також дозволяють змінювати значення змінних та об'єктів за допомогою простих операцій.
            </p>

            <h3>Перетворення рядків у числа</h3>
            <p>
                Унарний плюс дозволяє перетворювати рядки у числа, що може бути корисним при обчисленнях:
            </p>
            <pre>
        <code>
          {`
let str = "10";
let num = +str; // num = 10
          `}
        </code>
      </pre>

            <h3>Перевірка на існування</h3>
            <p>
                Унарні оператори корисні при перевірці на існування (<code>null</code> або <code>undefined</code>):
            </p>
            <pre>
        <code>
          {`
let obj = null;
let exists = !!obj; // exists = false
          `}
        </code>
      </pre>

            <h3>Інкремент та декремент</h3>
            <p>
                Унарні оператори дозволяють здійснювати швидкий інкремент або декремент змінної, що може пришвидшити виконання коду:
            </p>
            <pre>
        <code>
          {`
let a = 0;
let b = ++a;
console.log(b); // 1
          `}
        </code>
      </pre>

            <div className='conclusion'>
                <h2>Висновок</h2>
                <p>
                    Розуміння явного та неявного перетворення типів даних є важливим для написання надійного та
                    передбачуваного коду. Використання явного перетворення допомагає уникнути неочікуваних помилок, а
                    строге порівняння <code>===</code> запобігає проблемам, пов'язаним із неявним перетворенням.
                </p>
            </div>
        </div>
    );
};

export default UnaryOperatorsPage;