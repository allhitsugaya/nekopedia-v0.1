import React from 'react';

const BinaryLogicalOperatorsPage = () => {
    return (
        <div className="page-container">
            <h1>Бінарні та логічні оператори</h1>
            <p>
                В JavaScript існують різні типи операторів, які використовуються для виконання операцій над значеннями. Бінарні оператори працюють з двома операндами і виконують операції, такі як додавання, віднімання, множення та інші математичні операції. Логічні оператори, такі як "AND" (<code>&&</code>) і "OR" (<code>||</code>), використовуються для створення умовних виразів, які видають логічні значення <code>true</code> або <code>false</code>.
            </p>

            <h2>Бінарні оператори</h2>
            <p>
                Бінарні оператори - це операції, які приймають два операнди, тобто значення, над якими вони виконують дії. Ось деякі з найпоширеніших бінарних операторів в JavaScript:
            </p>
            <pre>
        <code>
          {`
let a = 10;
let b = 5;

let sum = a + b; // Результат: 15
let difference = a - b; // Результат: 5
let product = a * b; // Результат: 50
let quotient = a / b; // Результат: 2
          `}
        </code>
      </pre>
            <p>
                Бінарні та арифметичні операції в JS - це два різних поняття. Бінарні операції - це ті, що приймають два операнди та повертають одне значення. Арифметичні операції - це підмножина бінарних операцій, що виконують математичні дії, такі як додавання, віднімання, множення, ділення та остача від ділення. Отже, всі арифметичні операції є бінарними, але не всі бінарні операції є арифметичними.
            </p>
            <p>
                Наприклад, в JS існують також бінарні операції порівняння, логічні операції, побітові операції та операції присвоєння, які не є арифметичними. Вони використовуються для перевірки рівності, нерівності, істинності, хибності, маніпуляції з битами та зміни значень змінних відповідно.
            </p>

            <h3>Арифметична операція додавання</h3>
            <p>
                Це операція, яка приймає два операнди та повертає їх суму.
            </p>
            <pre>
        <code>
          {`
let a = 5; // a є типу number
let b = 7; // b є типу number
console.log(a + b); // 12, бо 5 + 7 = 12

let c = "Hello"; // c є типу string
let d = "World"; // d є типу string
console.log(c + d); // HelloWorld, бо "Hello" + "World" = "HelloWorld"
          `}
        </code>
      </pre>

            <h3>Бінарна операція порівняння</h3>
            <p>
                Це операція, яка приймає два операнди та повертає значення <code>true</code> або <code>false</code>, залежно від того, чи виконується певна умова.
            </p>
            <pre>
        <code>
          {`
let x = 10; // x є типу number
let y = "10"; // y є типу string
console.log(x == y); // true, бо значення x та y рівні після приведення типів
console.log(x === y); // false, бо типи x та y не рівні
          `}
        </code>
      </pre>

            <h2>Логічні оператори</h2>
            <p>
                Логічні оператори використовуються для порівняння та об'єднання логічних значень. Ось деякі з найпоширеніших логічних операторів:
            </p>
            <ul>
                <li><code>&&</code> (логічне "І" або "AND")</li>
                <li><code>||</code> (логічне "АБО" або "OR")</li>
                <li><code>!</code> (логічне заперечення)</li>
            </ul>
            <p>
                Логічні оператори повертають логічні значення <code>true</code> або <code>false</code> в залежності від результату порівняння.
            </p>
            <pre>
        <code>
          {`
let x = 5;
let y = 10;

let result1 = x < y && x !== y; // Результат: true
let result2 = x === y || y > 20; // Результат: false
let result3 = !(x < y); // Результат: false
          `}
        </code>
      </pre>
            <p>
                Логічні оператори дозволяють виконувати умовні операції та створювати складні умови.
            </p>

            <h3>Логічний оператор "??"</h3>
            <p>
                Логічний оператор <code>??</code>, введений в ECMAScript 2020 (ES11), використовується для визначення значення за замовчуванням (fallback) для змінної, яка може бути <code>null</code> або <code>undefined</code>. Він повертає перше визначене (не <code>null</code> і не <code>undefined</code>) значення або значення за замовчуванням, якщо всі значення <code>null</code> або <code>undefined</code>.
            </p>
            <pre>
        <code>
          {`
let user = null;
let defaultUser = { name: 'Гість' };

let currentUser = user ?? defaultUser;

console.log(currentUser); // Результат: { name: 'Гість' }
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі <code>currentUser</code> приймає значення змінної <code>user</code>, якщо воно не є <code>null</code> або <code>undefined</code>, інакше - значення <code>defaultUser</code>.
            </p>
        </div>
    );
};

export default BinaryLogicalOperatorsPage;