import React from 'react';

const HoistingPage = () => {
    return (
        <div className="page-container">
            <h1>Сплив змінних (Hoisting)</h1>
            <p>
                Сплив змінних, або "hoisting", є однією з особливостей, яку варто розуміти при роботі з JavaScript. Ця концепція впливає на те, як змінні та функції обробляються в контексті коду.
            </p>
            <p>
                Справа ви бачите цикл роботи JavaScript, що показує послідовність, в якій відбувається оголошення та ініціалізація змінних.
            </p>
            <p>
                Однак не забуватимемо, що у JavaScript ми можемо оголошувати та ініціалізувати наші змінні одночасно, як у цьому ну просто найпоширенішому прикладі:
            </p>
            <pre>
        <code>
          {`
var a = 100;
          `}
        </code>
      </pre>

            <h2>Що таке "Сплив змінних"?</h2>
            <p>
                Сплив змінних - це механізм, властивий JavaScript, коли декларації змінних та функцій піднімаються (спливають) вгору в своєму лексичному контексті перед тим, як код буде виконаний. Це означає, що ви можете використовувати змінні та функції до їх декларації в коді.
            </p>
            <p>
                Давайте подивимося на приклад спливу змінних:
            </p>
            <pre>
        <code>
          {`
console.log(x); // undefined
var x = 5;
          `}
        </code>
      </pre>
            <p>
                Хоча змінна <code>x</code> виводиться перед її декларацією, код все одно працює. Однак значення <code>undefined</code> показує, що змінна була піднята вгору перед виконанням коду. Тобто фактично код виглядає так:
            </p>
            <pre>
        <code>
          {`
var x; // Змінну підняли (спливли) вгору
console.log(x); // undefined
x = 5; // Присвоєння значення
console.log(x); // 5
          `}
        </code>
      </pre>
            <p>
                Це дозволяє нам використовувати змінну <code>x</code> навіть до її фактичної декларації.
            </p>

            <h2>Сплив змінних (Hoisting) функцій</h2>
            <p>
                Та ж сама концепція застосовується до функцій. Функції також піднімаються вгору перед виконанням коду. Давайте розглянемо приклад:
            </p>
            <pre>
        <code>
          {`
sayHello(); // Виклик функції перед декларацією

function sayHello() {
  console.log("Привіт!");
}
          `}
        </code>
      </pre>
            <p>
                Функцію <code>sayHello</code> можна викликати навіть до того, як вона була оголошена, завдяки спливу функцій. Фактично для рушія код виглядає так:
            </p>
            <pre>
        <code>
          {`
function sayHello() {
  console.log("Привіт!");
}

sayHello(); // Виклик функції після декларації
          `}
        </code>
      </pre>

            <h2>Пастка: Ініціалізація та "let"/"const"</h2>
            <p>
                Хоча сплив змінних застосовується до <code>var</code>, варто бути обережними при використанні <code>let</code> і <code>const</code>. Давайте розглянемо приклад:
            </p>
            <pre>
        <code>
          {`
console.log(x); // ReferenceError: x is not defined
let x = 5;
          `}
        </code>
      </pre>
            <p>
                Змінна <code>x</code> не піднімається (спливає) вгору, якщо вона оголошена за допомогою <code>let</code> чи <code>const</code>. Тому ви отримаєте <code>ReferenceError</code>, якщо намагаєтеся використовувати її перед декларацією.
            </p>
        </div>
    );
};

export default HoistingPage;