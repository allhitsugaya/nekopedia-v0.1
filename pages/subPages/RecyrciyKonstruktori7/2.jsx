import React from 'react';

const RecursionPage = () => {
    return (
        <div className="page-container">
            <h1>Рекурсія</h1>
            <p>
                Рекурсія в програмуванні - це техніка, коли функція викликає сама себе для вирішення завдання. В JavaScript рекурсія є потужним інструментом, який дозволяє розв'язувати складні завдання шляхом діління їх на більш прості підзадачі. У цій доповіді ми розглянемо основні поняття рекурсії, надамо приклади рекурсивних функцій та визначимо ситуації, коли використання рекурсії є найкращим вибором.
            </p>

            <h2>Що таке рекурсія?</h2>
            <p>
                Рекурсія - це процес, коли функція викликає сама себе. У рекурсивних функціях завдання ділиться на більш прості підзавдання, і функція викликається для кожного з цих підзавдань до завершення всього завдання. Рекурсія базується на ідейному поділі та владному підкоренні проблеми.
            </p>

            <h2>Приклад рекурсивної функції 1: Факторіал числа</h2>
            <p>
                Факторіал числа - це добуток всіх цілих чисел від 1 до цього числа. Факторіал <code>n</code> позначається як <code>n!</code> і обчислюється як <code>n! = n * (n-1) * (n-2) * ... * 2 * 1</code>. Ми можемо обчислити факторіал за допомогою рекурсивної функції:
            </p>
            <pre>
        <code>
          {`
function factorial(n) {
  if (n === 0 || n === 1) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}

console.log(factorial(5)); // Виведе 120 (5! = 5 * 4 * 3 * 2 * 1)
          `}
        </code>
      </pre>

            <h2>Приклад рекурсивної функції 2: Сума елементів масиву</h2>
            <p>
                Ми можемо використовувати рекурсію для обчислення суми всіх елементів масиву:
            </p>
            <pre>
        <code>
          {`
function sumArray(arr, index) {
  if (index === 0) {
    return arr[0];
  } else {
    return arr[index] + sumArray(arr, index - 1);
  }
}

const numbers = [1, 2, 3, 4, 5];
console.log(sumArray(numbers, numbers.length - 1)); // Виведе 15 (1 + 2 + 3 + 4 + 5)
          `}
        </code>
      </pre>

            <h2>Завдання, де рекурсія є найкращим вибором</h2>
            <ul>
                <li>
                    <strong>Пошук у глибину (Depth-First Search):</strong> В рекурсивних алгоритмах обходу графів (наприклад, дерев), рекурсія зазвичай є природнім вибором.
                </li>
                <li>
                    <strong>Форматування дерева об'єктів:</strong> Рекурсивні функції дозволяють обходити та форматувати складні структури даних, такі як дерева об'єктів.
                </li>
                <li>
                    <strong>Графічні інтерфейси:</strong> В деяких бібліотеках і фреймворках для створення графічних інтерфейсів використовують рекурсивні методи для побудови складних інтерфейсів.
                </li>
            </ul>

            <h2>Заключення</h2>
            <p>
                Рекурсія - це потужний інструмент, який допомагає розв'язувати складні завдання шляхом розкладання їх на менші частини. Вона використовується в багатьох аспектах програмування і може значно полегшити розробку програм. Тим не менше, рекурсія повинна використовуватися ретельно, оскільки некоректно написана рекурсивна функція може призвести до переповнення стеку і викликів функцій.
            </p>
        </div>
    );
};

export default RecursionPage;