import React from 'react';

const CodeFormattingPage = () => {
    return (
        <div className="page-container">
            <h1>Частина 3: Оформлення коду</h1>
            <p>
                Відступи та правильне форматування грають важливу роль в написанні якісного та зрозумілого коду на JavaScript. Дотримання єдиного стилю форматування сприяє покращенню читабельності коду, полегшує спільну роботу в команді та зменшує ризик виникнення помилок. У цьому розділі ми розглянемо важливі практики використання відступів та форматування в JavaScript, а також інструменти, які допомагають автоматизувати цей процес.
            </p>

            <h2>1. Дотримання Єдиного Стилю</h2>
            <p>
                Одним із ключових аспектів використання відступів та форматування є дотримання єдиного стилю коду всередині проекту. Це означає, що всі розробники в команді повинні користуватися однаковими правилами відступів та форматування, щоб код був послідовним та зрозумілим для всіх.
            </p>
            <h3>Приклад 1: Дотримання єдиного стилю відступів</h3>
            <pre>
        <code>
          {`
// Поганий стиль
function poorStyle() {
var x = 10;
if (x > 5) {
console.log('x більше 5');
}
}

// Кращий стиль
function goodStyle() {
  var x = 10;
  if (x > 5) {
    console.log('x більше 5');
  }
}
          `}
        </code>
      </pre>

            <h2>2. Використання Автоматичних Інструментів</h2>
            <p>
                Важливо мати уніфікований стиль форматування для вашого коду. Для JavaScript існують різні стандарти форматування, такі як ESLint, Airbnb JavaScript Style Guide, і Google JavaScript Style Guide. Ви можете вибрати один з них або створити свій власний стиль форматування для вашого проекту.
            </p>
            <h3>Приклад 2: Використання Prettier</h3>
            <p>
                Prettier - це інструмент, який автоматично форматує код згідно з налаштованими правилами. Можна закинути туди код, а він його зможе відформатувати.
            </p>
            <pre>
        <code>
          {`
// Код до використання Prettier
function poorlyFormattedCode() {
var x=5;
if(x>3){
console.log('x більше 3');}
}

// Після використання Prettier
function wellFormattedCode() {
  var x = 5;
  if (x > 3) {
    console.log('x більше 3');
  }
}
          `}
        </code>
      </pre>

            <h2>3. Автоматичне форматування в PhpStorm</h2>
            <p>
                В PhpStorm (або іншій IDE на базі IntelliJ IDEA), ви можете використовувати автоматичне форматування коду за допомогою вбудованих інструментів. Щоб налаштувати автоматичне форматування коду, слід виконати наступні кроки:
            </p>
            <h3>Налаштування редактора коду:</h3>
            <p>
                Перш ніж налаштовувати автоматичне форматування, впевніться, що редактор відображає код з відступами та форматуванням, яке ви бажаєте використовувати. Це можна перевірити у налаштуваннях редактора. Для цього:
            </p>
            <ul>
                <li>У меню PhpStorm перейдіть до <code>File &gt; Settings</code> (для Windows) або <code>PhpStorm &gt; Preferences</code> (для macOS).</li>
                <li>У налаштуваннях оберіть <code>Editor &gt; Code Style</code>.</li>
            </ul>
            <p>
                Тут ви можете налаштувати вигляд вашого коду, такий як розмір відступів, використання табуляції чи пробілів, форматування брекетів тощо.
            </p>

            <h3>Автоматичне форматування коду:</h3>
            <p>
                PhpStorm має можливість автоматично форматувати код, коли ви вставляєте його або натискаєте гарячу клавішу. Для цього:
            </p>
            <ul>
                <li>У редакторі виберіть код, який ви хочете відформатувати.</li>
                <li>Використовуйте гарячу клавішу <code>Reformat Code</code>. У більшості випадків це <code>Ctrl + Alt + L</code> (для Windows/Linux) або <code>Cmd + Option + L</code> (для macOS).</li>
            </ul>
            <p>
                Це дозволить вам швидко відформатувати виділений код відповідно до налаштувань стилю, які ви визначили у попередньому кроці.
            </p>
            <p>
                Важливо пам'ятати, що правильна настройка налаштувань стилю є ключовою для успішного автоматичного форматування. Це допомагає забезпечити консистентність та читабельність коду в проекті.
            </p>
        </div>
    );
};

export default CodeFormattingPage;