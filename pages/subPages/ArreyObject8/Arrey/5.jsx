import React from 'react';

const ArraysPage = () => {
    return (
        <div className="page-container">
            <h1>Array та способи роботи з ним</h1>
            <p>
                Масиви - це упорядковані колекції даних, де кожен елемент може бути іншого типу. Вони створюються за допомогою літерала <code>[]</code> та заповнюються значеннями. Масиви можуть містити числа, рядки, об'єкти та навіть інші масиви. Базовими операціями є створення масиву, отримання доступу до елементу, зміна значення та отримання довжини масиву:
            </p>
            <pre>
        <code>
          {`
// Створення масиву
const fruits = ['apple', 'banana', 'cherry'];
// Отримання доступу до елементу за індексом
const firstFruit = fruits[0]; // 'apple'
// Зміна значення елементу
fruits[1] = 'orange'; // fruits стане ['apple', 'orange', 'cherry']
// Отримання довжини масиву
const length = fruits.length; // 3
          `}
        </code>
      </pre>
            <p>
                Проте давайте подивимося на деталі роботи з масивами.
            </p>

            <h2>Створення масивів та основні операції з ними</h2>
            <p>
                Масиви створюються за допомогою літерала <code>[]</code>, і ми розглянемо цей процес, а також різні способи ініціалізації масивів. Вивчимо, як додавати елементи до масиву, змінювати їх значення та отримувати доступ до конкретних елементів.
            </p>
            <p>
                В JavaScript існує кілька способів створення масивів, та ось декілька прикладів разом із поясненнями:
            </p>

            <h3>1. Літеральний спосіб</h3>
            <p>
                Створення масиву без використання конструктора <code>Array</code>:
            </p>
            <pre>
        <code>
          {`
const fruits = ['apple', 'banana', 'cherry'];
          `}
        </code>
      </pre>
            <p>
                Це найпоширеніший спосіб створення масиву. Ви просто перераховуєте елементи масиву в квадратних дужках, розділені комами.
            </p>

            <h3>2. З використанням конструктора Array</h3>
            <pre>
        <code>
          {`
const colors = new Array('red', 'green', 'blue');
          `}
        </code>
      </pre>
            <p>
                Ви також можете створювати масиви за допомогою конструктора <code>Array</code>. Проте цей спосіб рідко використовується, оскільки літеральний спосіб є більш зручним.
            </p>

            <h3>3. Спрощений синтаксис створення масиву</h3>
            <p>
                Для створення масиву заданого розміру:
            </p>
            <pre>
        <code>
          {`
const numbers = new Array(5);
          `}
        </code>
      </pre>
            <p>
                У цьому випадку створиться масив з 5 "порожніми" елементами. Вам потрібно буде додати значення до цих елементів пізніше.
            </p>
            <p>
                Різниця між цими підходами полягає в структурі та зручності створення масиву:
            </p>
            <ul>
                <li>Літеральний спосіб є найбільш читабельним та коротким. Ви вказуєте всі елементи одразу.</li>
                <li>Використання конструктора <code>Array</code> може бути менш зручним і займати більше місця.</li>
                <li>Спрощений синтаксис для масиву зазначеного розміру може бути корисним, коли вам потрібно створити масив із заздалегідь відомим розміром, але в цьому випадку масив буде містити порожні елементи.</li>
            </ul>
            <p>
                Зазвичай, для створення масивів використовується літеральний спосіб, оскільки він є найзручнішим та читабельним для більшості випадків.
            </p>

            <h2>Додавання та видалення елементів з масивів</h2>
            <p>
                Отже, масиви в JavaScript надають гнучкість для роботи з даними. Методи <code>push</code>, <code>pop</code>, <code>unshift</code>, <code>shift</code> дозволяють додавати та видаляти елементи, а <code>splice</code> надає більший контроль над редагуванням масиву.
            </p>
            <pre>
        <code>
          {`
// Додавання елементу в кінець масиву
fruits.push('grape'); // fruits стане ['apple', 'orange', 'cherry', 'grape']

// Видалення останнього елементу
const removedFruit = fruits.pop(); // 'grape', fruits стане ['apple', 'orange', 'cherry']

// Додавання елементу в початок масиву
fruits.unshift('kiwi'); // fruits стане ['kiwi', 'apple', 'orange', 'cherry']

// Видалення першого елементу
const removedFruit = fruits.shift(); // 'kiwi', fruits стане ['apple', 'orange', 'cherry']
          `}
        </code>
      </pre>
        </div>
    );
};

export default ArraysPage;