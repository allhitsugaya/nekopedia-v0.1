import React from 'react';

const NestedInfiniteLoopsPage = () => {
    return (
        <div className="page-container">
            <h1>Вкладені та нескінченні цикли</h1>
            <p>
                У деяких випадках може бути необхідно використовувати вкладені цикли або навіть створювати нескінченні цикли для розв'язання конкретних завдань.
            </p>
            <p>
                Однак важливо бути обережними, щоб уникнути нескінченних циклів, які можуть призвести до неправильної роботи програми. Завжди перевіряйте умови виходу з циклу та користуйтеся захисними механізмами для забезпечення надійності вашого коду.
            </p>
            <p>
                Ми розглянемо, як працювати з вкладеними циклами та як уникнути пасток нескінченних циклів.
            </p>

            <h2>Вкладені цикли</h2>
            <p>
                Вкладені цикли - це цикли, які знаходяться всередині інших циклів. Вони корисні, коли вам потрібно виконати певний блок коду для кожного елемента у зовнішньому циклі. Ось приклад вкладеного циклу <code>for</code>, який виводить всі можливі комбінації двох чисел від 1 до 3:
            </p>
            <pre>
        <code>
          {`
for (let i = 1; i <= 3; i++) {
  for (let j = 1; j <= 3; j++) {
    console.log(i, j);
  }
}
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі ми маємо зовнішній цикл, який ітерується від 1 до 3, і вкладений цикл, який також ітерується від 1 до 3. В результаті кожен елемент зовнішнього циклу буде використовуватися з кожним елементом вкладеного циклу, що призводить до виводу всіх можливих комбінацій чисел.
            </p>

            <h2>Нескінченні цикли</h2>
            <p>
                Нескінченний цикл - це цикл, який ніколи не завершується при нормальних умовах. Він може виникнути через помилку в коді або некоректне визначення умови виходу з циклу. Ось приклад нескінченного циклу <code>while</code>:
            </p>
            <pre>
        <code>
          {`
while (true) {
  console.log("Цей цикл ніколи не завершиться!");
}
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі ми використали умову <code>true</code>, яка завжди є правдивою, тому цей цикл буде виконуватися безкінечно.
            </p>

            <h2>Уникнення нескінченних циклів</h2>
            <p>
                Нескінченні цикли можуть заморозити вашу програму і призвести до її відмови. Щоб уникнути цього, важливо правильно визначити умови виходу з циклу та перевіряти їх уважно. Ось кілька порад:
            </p>
            <ul>
                <li>Визначте чітку умову виходу з циклу.</li>
                <li>Переконайтеся, що умова виходу може статися.</li>
                <li>Використовуйте захисний механізм, такий як <code>break</code>, щоб зупинити цикл у разі потреби.</li>
                <li>Використовуйте розуміння вашого коду та відладчик для виявлення проблем з нескінченними циклами.</li>
            </ul>
            <p>
                Наведений нижче приклад демонструє використання умови виходу з нескінченного циклу <code>while</code>:
            </p>
            <pre>
        <code>
          {`
let counter = 0;
while (counter < 10) {
  console.log("Цей цикл виконається 10 разів");
  counter++;
}
          `}
        </code>
      </pre>
            <p>
                Цей цикл завершиться, коли <code>counter</code> досягне значення 10.
            </p>
        </div>
    );
};

export default NestedInfiniteLoopsPage;