import React from 'react';

const ForLoopsPage = () => {
    return (
        <div className="page-container">
            <h1>Цикл for, for…of, for…in</h1>
            <p>
                Цикли - це потужні інструменти в програмуванні, які дозволяють вам ефективно обробляти дані та виконувати однотипні завдання. Вибір між циклами залежить від конкретного завдання, яке ви хочете вирішити.
            </p>
            <p>
                Використовуйте <code>for</code>, коли вам потрібно визначити умови для ітерації.
                Використовуйте <code>for...in</code>, коли вам потрібно перебрати властивості об'єкта.
                Використовуйте <code>for...of</code>, коли ви маєте справу з ітерабельними об'єктами.
            </p>
            <p>
                Але давайте подивимося більш детально:
            </p>

            <h2>Цикл for</h2>
            <p>
                Цикл <code>for</code> - це найпоширеніший вид циклу в JavaScript. Він дозволяє вам вказати початкову умову, умову виходу та крок ітерації. Ось загальний синтаксис цього циклу:
            </p>
            <pre>
        <code>
          {`
for (ініціалізація; умова; ітерація) {
    // Блок коду, який виконується на кожній ітерації
}
          `}
        </code>
      </pre>
            <p>
                Приклад використання циклу <code>for</code> для виведення чисел від 1 до 5:
            </p>
            <pre>
        <code>
          {`
for (let i = 1; i <= 5; i++) {
    console.log(i);
}
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі ми ініціалізуємо змінну <code>i</code> значенням 1, встановлюємо умову, що цикл буде виконуватися, доки <code>i</code> менше або дорівнює 5, і після кожної ітерації збільшуємо значення <code>i</code> на 1.
            </p>
            <p>
                Давайте ще раз розглянемо цикл <code>for</code> по частинах:
            </p>
            <pre>
        <code>
          {`
початок
let i = 1
Виконується один раз, при вході в цикл.

умова
i <= 5
Перевіряється перед кожною ітерацією циклу. Якщо умова невірна, цикл зупиняється.

тіло
console.log(i)
Виконується знову і знову, поки умова є правдивою (true).

крок
i++
Виконується після тіла на кожній ітерації, але перед перевіркою умови.
          `}
        </code>
      </pre>
            <p>
                Загальний алгоритм циклу працює так:
            </p>
            <pre>
        <code>
          {`
Початок виконання
 → (Якщо умова == true → виконати тіло і виконати крок)
 → (Якщо умова == true → виконати тіло і виконати крок) 
→ (Якщо умова == true → виконати тіло і виконати крок) 
→ ...
          `}
        </code>
      </pre>

            <h2>Цикл for...in</h2>
            <p>
                Цикл <code>for...in</code> використовується для ітерації по властивостях об'єкта. Ось його синтаксис:
            </p>
            <pre>
        <code>
          {`
for (змінна in об'єкт) {
    // Блок коду, який виконується на кожній ітерації
}
          `}
        </code>
      </pre>
            <p>
                Приклад використання циклу <code>for...in</code> для ітерації по властивостях об'єкта:
            </p>
            <pre>
        <code>
          {`
const person = {
    firstName: 'John',
    lastName: 'Doe',
    age: 30
};

for (let key in person) {
    console.log(key, person[key]);
}
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі ми перебираємо всі властивості об'єкта <code>person</code> та виводимо їхні ключі та значення.
            </p>

            <h2>Цикл for...of</h2>
            <p>
                Цикл <code>for...of</code> використовується для ітерації по елементах ітерабельних об'єктів, таких як масиви, рядки, мапи тощо. Ось синтаксис цього циклу:
            </p>
            <pre>
        <code>
          {`
for (змінна of ітерабельний_об'єкт) {
    // Блок коду, який виконується на кожній ітерації
}
          `}
        </code>
      </pre>
            <p>
                Приклад використання циклу <code>for...of</code> для ітерації по елементах масиву:
            </p>
            <pre>
        <code>
          {`
const numbers = [1, 2, 3, 4, 5];

for (let num of numbers) {
    console.log(num);
}
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі ми перебираємо всі елементи масиву <code>numbers</code> та виводимо їх.
            </p>
        </div>
    );
};

export default ForLoopsPage;