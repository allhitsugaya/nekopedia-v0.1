import React from 'react';

const GettersSettersPage = () => {
    return (
        <div className="page-container">
            <h1>Гетери та сетери</h1>
            <p>
                У світі програмування, особливо в мові JavaScript, гетери та сетери – це потужний механізм, який дозволяє контролювати доступ до властивостей об'єктів. Ця функціональність робить код більш безпечним і допомагає забезпечити правильне взаємодіяти з даними. Давайте розглянемо, що таке гетери та сетери, і як їх використовувати в JavaScript.
            </p>

            <h2>1. Гетери і їх призначення</h2>
            <p>
                Гетери - це функції, які дозволяють отримувати значення властивостей об'єктів. Вони ідеально підходять для забезпечення безпечного та контрольованого доступу до даних. Щоб створити гетер, використовується ключове слово <code>get</code> разом з ім'ям властивості.
            </p>
            <pre>
        <code>
          {`
const user = {
  firstName: "John",
  lastName: "Doe",

  get fullName() {
    return \`\${this.firstName} \${this.lastName}\`;
  }
};

console.log(user.fullName); // "John Doe"
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі, ми створили об'єкт <code>user</code> з гетером <code>fullName</code>, який об'єднує ім'я та прізвище користувача в один рядок. Завдяки гетеру, ми можемо легко отримати повне ім'я користувача, не звертаючись до окремих властивостей. А при зміні <code>user.firstName</code> одразу зміни будуть і у <code>fullName</code>.
            </p>

            <h2>2. Сетери та їх призначення</h2>
            <p>
                Сетери - це функції, які дозволяють змінювати значення властивостей об'єктів. Вони корисні для контролю за даними та валідації введених значень. Для створення сетера використовується ключове слово <code>set</code> разом з ім'ям властивості.
            </p>
            <pre>
        <code>
          {`
const temperature = {
  _celsius: 0,

  get fahrenheit() {
    return (this._celsius * 9/5) + 32;
  },

  set fahrenheit(value) {
    this._celsius = (value - 32) * 5/9;
  }
};

temperature.fahrenheit = 68;
console.log(temperature.fahrenheit); // 20
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі, ми створили об'єкт <code>temperature</code> з сетером <code>fahrenheit</code>, який конвертує градуси Фаренгейта в градуси Цельсія і зберігає їх у відповідній властивості <code>_celsius</code>. Сетер дозволяє нам легко встановлювати температуру у Фаренгейтах, і автоматично переводити її в градуси Цельсія.
            </p>

            <h2>3. Захист властивостей об'єктів</h2>
            <p>
                Гетери та сетери також можуть використовуватися для захисту властивостей об'єктів від некоректного доступу та невірних значень.
            </p>
            <pre>
        <code>
          {`
const person = {
  _age: 0,

  get age() {
    return this._age;
  },

  set age(value) {
    if (value >= 0) {
      this._age = value;
    } else {
      console.log("Вік не може бути від'ємним.");
    }
  }
};

person.age = 25; // Установка віку
console.log(person.age); // 25

person.age = -5; // Спроба установки віку від'ємним числом
// Виведе "Вік не може бути від'ємним."
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі, гетер <code>age</code> дозволяє отримувати вік особи, а сетер <code>age</code> перевіряє, чи вік є не від'ємним значенням перед зберіганням. Таким чином, ми можемо забезпечити коректну обробку даних та захист від некоректних значень.
            </p>

            <h2>Заключення</h2>
            <p>
                Гетери та сетери є важливим інструментом у JavaScript, який дозволяє контролювати доступ до властивостей об'єктів. Вони забезпечують безпеку даних, дозволяють валідувати введені значення та спрощують роботу з об'єктами. Використання гетерів та сетерів робить код більш структурованим, зрозумілим та підтримуваним.
            </p>
        </div>
    );
};

export default GettersSettersPage;