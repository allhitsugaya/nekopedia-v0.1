import React from 'react';

const TimersPage = () => {
    return (
        <div className="page-container">
            <h1>setInterval, setTimeout та clearTimeout</h1>
            <p>
                Тепер нам зрозуміло, що синхронний код виконується послідовно, кожна операція чекає завершення попередньої. А ось найпростіші способи створення асинхронності включають використання <code>setInterval</code> та <code>setTimeout</code>.
            </p>

            <h2>setInterval</h2>
            <p>
                <code>setInterval</code> дозволяє виконувати функцію через певний інтервал часу. Це корисно для періодичних завдань, таких як оновлення часових годинників або відправлення запитів на сервер. Приклад:
            </p>
            <pre>
        <code>
          {`
setInterval(function() {
    console.log("Цей код виконується кожні 1000 мілісекунд");
}, 1000);
          `}
        </code>
      </pre>
            <p>
                <code>setInterval</code> є вбудованим методом JavaScript, який використовується для періодичного виклику функції через зазначений проміжок часу.
            </p>
            <p>
                Синтаксис: <code>setInterval(callback, delay)</code>, де <code>callback</code> - функція, яку потрібно викликати, а <code>delay</code> - інтервал в мілісекундах. Важливо зауважити, що виклик <code>setInterval</code> поверне ідентифікатор таймера, який можна використовувати для відміни запланованого виклику за допомогою <code>clearInterval</code>. Приклад:
            </p>
            <pre>
        <code>
          {`
let intervalId = setInterval(function() {
    console.log("Цей код виконується кожні 1000 мілісекунд");
}, 1000);

// Для зупинки інтервалу:
// clearInterval(intervalId);
          `}
        </code>
      </pre>

            <h2>setTimeout</h2>
            <p>
                Затримка виклику функції можна також досягти за допомогою <code>setTimeout</code>. Наприклад:
            </p>
            <pre>
        <code>
          {`
setTimeout(function() {
    console.log("Цей код виконується після затримки 2000 мілісекунд");
}, 2000);
          `}
        </code>
      </pre>
            <p>
                <code>setTimeout</code> також використовується для виклику функції, але тільки один раз після затримки.
            </p>
            <p>
                Синтаксис: <code>setTimeout(callback, delay)</code>, де <code>callback</code> - функція для виклику, а <code>delay</code> - затримка в мілісекундах. Виклик <code>setTimeout</code> також буде повертати ідентифікатор. Хоча взагалі ідентифікатори не завжди зберігають. Приклад:
            </p>
            <pre>
        <code>
          {`
setTimeout(function() {
    console.log("Цей код виконується після затримки 2000 мілісекунд");
}, 2000);
          `}
        </code>
      </pre>

            <h2>clearTimeout</h2>
            <p>
                Однак, асинхронність також може створювати проблеми, такі як непередбачувана поведінка чи конфлікти викликів. Для управління асинхронним кодом та його відміна часто використовується <code>clearTimeout</code>. Це дозволяє уникнути неочікуваних результатів та підтримувати контроль над асинхронними операціями в JavaScript. Наприклад:
            </p>
            <pre>
        <code>
          {`
let myTimeout = setTimeout(function() {
    console.log("Цей код виконується через 3000 мілісекунд");
}, 3000);

// Відміна виклику setTimeout
clearTimeout(myTimeout);
          `}
        </code>
      </pre>
            <p>
                <code>clearTimeout</code> використовується для відміни запланованого виклику функції, який був створений за допомогою <code>setTimeout</code>. Ви можете використовувати його, коли хочете скасувати подальше виконання коду, який був запланований для виклику після певного періода затримки.
            </p>
            <p>
                Основний принцип роботи <code>clearTimeout</code> полягає в передачі ідентифікатора таймера, який ви хочете скасувати. Коли ви викликаєте <code>clearTimeout</code>, він скасовує виклик функції, який був запланований за допомогою <code>setTimeout</code>, і вже не викликає його. Приклад використання:
            </p>
            <pre>
        <code>
          {`
let myTimeout = setTimeout(function() {
    console.log("Цей код виконується через 3000 мілісекунд");
}, 3000);

// Скасування виклику setTimeout
clearTimeout(myTimeout);
          `}
        </code>
      </pre>
            <p>
                У цьому прикладі <code>myTimeout</code> - це ідентифікатор таймера, який повертається функцією <code>setTimeout</code>. Якщо ви викличете <code>clearTimeout(myTimeout)</code>, виклик <code>console.log</code> не відбудеться, і подальше виконання коду буде продовжено без затримки.
            </p>
            <p>
                Використовуйте <code>clearTimeout</code>, коли вам потрібно скасувати виклик функції, який був запланований для виконання пізніше, і це може бути корисно в різних ситуаціях, наприклад, коли користувач взаємодіє з елементом або в інших сценаріях веб-розробки.
            </p>

            <h2>Заключення</h2>
            <p>
                Використання <code>setInterval</code>, <code>setTimeout</code> та <code>clearTimeout</code> дозволяє керувати асинхронними операціями в JavaScript. Ці методи є важливими для створення відзивчивих та ефективних додатків, де потрібно контролювати час виконання операцій та уникнути непередбачуваних результатів.
            </p>
        </div>
    );
};

export default TimersPage;