import React from 'react';

const VariableDeclarationPage = () => {
    return (
        <div className="page-container">
            <h1>Оголошення змінних. Різниця між "var", "let" та "const"</h1>
            <p>
                Оголошення змінних є однією з фундаментальних концепцій у JavaScript. Вони дозволяють зберігати та керувати даними у програмах. Зараз ми розглянемо, як оголошувати змінні та яка різниця між ключовими словами <code>var</code>, <code>let</code> та <code>const</code>.
            </p>

            <h2>Оголошення змінних</h2>
            <p>
                Оголошення змінних - це процес створення іменованих контейнерів для зберігання даних. У JavaScript є три способи оголошення змінних: <code>var</code>, <code>let</code> та <code>const</code>.
            </p>

            <h3>var</h3>
            <p>
                Ключове слово <code>var</code> було першим способом оголошення змінних у JavaScript. Змінні, оголошені за допомогою <code>var</code>, мають глобальний або функціональний обсяг видимості (залежно від того, де вони були оголошені). Ось приклад:
            </p>
            <pre>
        <code>
          {`
var name = "John";
console.log(name); // Виведе "John"
          `}
        </code>
      </pre>
            <p>
                Однак змінні, оголошені за допомогою <code>var</code>, мають проблему з областю видимості, що може призводити до небажаних ефектів, коли змінна доступна поза своєю функцією.
            </p>

            <h3>let</h3>
            <p>
                Ключове слово <code>let</code> було введене у стандарті ECMAScript 6 (ES6) і стало покращенням у порівнянні з <code>var</code>. Змінні, оголошені за допомогою <code>let</code>, мають блоковий обсяг видимості, що означає, що вони доступні лише у блоку коду, в якому були оголошені. Ось приклад:
            </p>
            <pre>
        <code>
          {`
let age = 30;
if (true) {
  let age = 25; // Локальна змінна у блоку
  console.log(age); // Виведе 25
}
console.log(age); // Виведе 30 (змінна зовнішнього блоку)
          `}
        </code>
      </pre>
            <p>
                Використання <code>let</code> дозволяє уникнути конфліктів імен змінних та поліпшити структуру коду.
            </p>

            <h3>const</h3>
            <p>
                Ключове слово <code>const</code> також введене у стандарті ES6 і використовується для оголошення змінних, значення яких не можна змінювати після їхньої ініціалізації. <code>const</code> також має блоковий обсяг видимості, але він вимагає обов'язкового присвоєння значення при оголошенні. Ось приклад:
            </p>
            <pre>
        <code>
          {`
const pi = 3.14159;
// pi = 3.14; // Помилка! Не можна змінити значення константи
          `}
        </code>
      </pre>
            <p>
                Використання <code>const</code> рекомендується для оголошення змінних, які не повинні змінюватися після ініціалізації, наприклад, констант або фіксованих значень.
            </p>

            <h2>Важливість розуміння та використання типів даних</h2>
            <p>
                Розуміння різниці між <code>var</code>, <code>let</code> та <code>const</code> дуже важливе для написання якісного та надійного коду. Неправильне використання може призводити до некоректної роботи програми або складних для відлагодження помилок.
            </p>
            <p>
                Крім того, розуміння та правильне використання типів даних в JavaScript є фундаментом для роботи з мовою. Це допомагає уникати непередбачуваних проблем і забезпечує більшу стабільність та читабельність вашого коду.
            </p>
        </div>
    );
};

export default VariableDeclarationPage;